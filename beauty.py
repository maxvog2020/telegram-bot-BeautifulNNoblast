from config import config
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, WebAppInfo, KeyboardButton, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.strategy import FSMStrategy
import json
import urllib


TOKEN = config.bot_token.get_secret_value()
CHAT_ID = config.chat_id.get_secret_value()
MODER = config.moder.get_secret_value()
WEB_PREFIX = "https://maxvog2020.github.io/telegram-bot-BeautifulNNoblast/web"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(fsm_strategy=FSMStrategy.USER_IN_CHAT)

#########################
async def looking_callback(message: Message, values):
    data = values['json_data']

    type = data['type'].strip()
    description = data['description'].strip()
    price = data['price'].strip()
    address = data['address'].strip()
    contacts = data['contacts'].strip()
    telegram = data['telegram']

    text = f'#–∏—â—É_–º–∞—Å—Ç–µ—Ä–∞ \n\n<em>–¢–∏–ø –º–∞—Å—Ç–µ—Ä–∞</em>\nüíñ <b>{type}</b>\n\n'

    if address != "":
        text += f'<em>–ü—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å</em>\nüè© {address}\n\n'
    if price != "":
        text += f'<em>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</em>\nüëõ {price}\n\n'
    if description != "":
        text += f'<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</em>\nüí¨ {description}\n\n'
    if telegram or contacts != "":
        text += f'<em>–ö–æ–Ω—Ç–∞–∫—Ç—ã</em>\nüë§ {contacts}'
    if telegram and contacts != "":
        text += f', '
    if telegram:
        text += get_telegram_ref(message)

    await send_with_images(CHAT_ID, text, [])
    await send_with_images(MODER, text + '\n\n\n<b>By</b> ' + get_telegram_ref(message), [])


async def offer_callback(message: Message, values):
    data = values['json_data']

    type = data['type'].strip()
    description = data['description'].strip()
    price = data['price'].strip()
    address = data['address'].strip()
    contacts = data['contacts'].strip()
    telegram = data['telegram']
    maps = data['maps']

    text = f'#–ø—Ä–µ–¥–ª–∞–≥–∞—é_—É—Å–ª—É–≥–∏ \n\n<em>–¢–∏–ø –º–∞—Å—Ç–µ—Ä–∞</em>\nüíñ {type}\n\n'

    if maps and address != "":
        address = get_address_ref(address)
    if address != "":
        text += f'<em>–ê–¥—Ä–µ—Å</em>\nüè© {address}\n\n'
    if price != "":
        text += f'<em>–¶–µ–Ω–∞</em>\nüëõ {price}\n\n'
    if description != "":
        text += f'<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</em>\nüí¨ {description}\n\n'
    if telegram or contacts != "":
        text += f'<em>–ö–æ–Ω—Ç–∞–∫—Ç—ã</em>\nüë§ {contacts}'
    if telegram and contacts != "":
        text += f', '
    if telegram:
        text += get_telegram_ref(message)

    await send_with_images(CHAT_ID, text, values.get('images'))
    await send_with_images(MODER, text + '\n\n\n<b>By</b> ' + get_telegram_ref(message), values.get('images'))


async def rent_callback(message: Message, values):
    data = values['json_data']

    type = data['type'].strip()
    description = data['description'].strip()
    price = data['price'].strip()
    address = data['address'].strip()
    contacts = data['contacts'].strip()
    telegram = data['telegram']

    text = f'#—Å–Ω–∏–º—É_—Ä–∞–±–æ—á–µ–µ_–º–µ—Å—Ç–æ \n\n<em>–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ</em>\nüéÄ {type}\n\n'

    if address != "":
        text += f'<em>–ü—Ä–∏–º–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å</em>\nüè© {address}\n\n'
    if price != "":
        text += f'<em>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</em>\nüëõ {price}\n\n'
    if description != "":
        text += f'<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</em>\nüí¨ {description}\n\n'
    if telegram or contacts != "":
        text += f'<em>–ö–æ–Ω—Ç–∞–∫—Ç—ã</em>\nüë§ {contacts}'
    if telegram and contacts != "":
        text += f', '
    if telegram:
        text += get_telegram_ref(message)

    await send_with_images(CHAT_ID, text, [])
    await send_with_images(MODER, text + '\n\n\n<b>By</b> ' + get_telegram_ref(message), [])
    

async def lease_callback(message: Message, values):
    data = values['json_data']

    type = data['type'].strip()
    description = data['description'].strip()
    price = data['price'].strip()
    address = data['address'].strip()
    contacts = data['contacts'].strip()
    telegram = data['telegram']
    maps = data['maps']

    if maps:
        address = get_address_ref(address)
    text = f'#—Å–¥–∞–º_—Ä–∞–±–æ—á–µ–µ_–º–µ—Å—Ç–æ \n\n<em>–ê–¥—Ä–µ—Å</em>\nüè© {address}\n\n'

    if type != "":
        text += f'<em>–î–ª—è –∫–æ–≥–æ</em>\n‚ù§Ô∏è‚Äçüî• {type}\n\n'
    if price != "":
        text += f'<em>–¶–µ–Ω–∞</em>\nüëõ {price}\n\n'
    if description != "":
        text += f'<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</em>\nüí¨ {description}\n\n'
    if telegram or contacts != "":
        text += f'<em>–ö–æ–Ω—Ç–∞–∫—Ç—ã</em>\nüë§ {contacts}'
    if telegram and contacts != "":
        text += f', '
    if telegram:
        text += get_telegram_ref(message)

    await send_with_images(CHAT_ID, text, values.get('images'))
    await send_with_images(MODER, text + '\n\n\n<b>By</b> ' + get_telegram_ref(message), values.get('images'))
    
async def feedback_callback(message: Message, values):
    data = values['json_data']

    who = data['who'].strip()
    description = data['description'].strip()
    contacts = data['contacts'].strip()
    telegram = data['telegram']

    text = f'#–æ—Ç–∑—ã–≤ \n\n<em>–ü—Ä–æ –∫–æ–≥–æ –æ—Ç–∑—ã–≤</em>\nü§î {who}\n\n'

    if description != "":
        text += f'<em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</em>\nüí¨ {description}\n\n'
    if telegram or contacts != "":
        text += f'<em>–ö–æ–Ω—Ç–∞–∫—Ç—ã</em>\nüë§ {contacts}'
    if telegram and contacts != "":
        text += f', '
    if telegram:
        text += get_telegram_ref(message)

    await send_with_images(CHAT_ID, text, [])
    await send_with_images(MODER, text + '\n\n\n<b>By</b> ' + get_telegram_ref(message), [])


callbacks = {
    "looking": looking_callback,
    "offer": offer_callback,
    "rent": rent_callback,
    "lease": lease_callback,
    "feedback": feedback_callback,
}

#########################
def get_telegram_ref(message: Message):
    return f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>'

def get_address_ref(str: str):
    return f'<a href="https://yandex.com/maps?text={urllib.parse.quote("–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, " + str)}">{str}</a>'

async def send_with_images(chat_id, text, images):
    if images == [] or images == None:
        return await bot.send_message(chat_id, text, parse_mode="HTML", disable_web_page_preview=True)

    media = [
        InputMediaPhoto(media=images[0].photo[-1].file_id, caption=text, parse_mode="HTML")
    ]

    for i in range(1, len(images)):
        media.append(InputMediaPhoto(media=images[i].photo[-1].file_id))

    return (await bot.send_media_group(chat_id, media))[0]


async def publish(message: Message, state: FSMContext):
    values = await state.get_data()

    callback = values.get('callback')
    await callback(message, values)

    for pic in values.get('images') or []:
        await pic.delete()
    if values.get('to_delete') != None:
        await values.get('to_delete').delete()
    
    await state.clear()
    message = await message.answer('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!')
    await asyncio.sleep(3)
    await message.delete()

@dp.message(F.photo)
async def on_get_photo(message: Message, state: FSMContext):
    values = await state.get_data()
    image_count = int(values.get('image_count')) or 0
    images = values.get('images') or []

    if image_count == 0:
        await message.delete()
        return
    else:
        images.append(message)
        image_count -= 1
        await state.update_data(images=images, image_count=image_count)

    if image_count == 0:
        await publish(message, state)

@dp.message(F.web_app_data)
async def on_get_data(message: Message, state: FSMContext):
    data = message.web_app_data.data

    json_data = json.loads(data)

    callback = callbacks[json_data['callback']]
    image_count = int(json_data.get('image_count') or 0)

    await message.delete()
    await state.update_data(callback=callback, image_count=image_count, json_data=json_data)

    if image_count == 0:
        await publish(message, state)
    else:
        to_delete = await message.answer(f"–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({image_count} —à—Ç.)")
        await state.update_data(to_delete=to_delete)


@dp.callback_query()
async def on_callbacks(callback: CallbackQuery):
    url = WEB_PREFIX + callback.data

    markup = ReplyKeyboardBuilder()
    markup.add(KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=url)))

    message = await callback.message.answer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º—É", reply_markup=markup.as_markup())

    await callback.answer()
    await asyncio.sleep(5)
    await message.delete()

@dp.message(Command("start"))
async def on_start(message: Message):
    if message.from_user.id == int(MODER):
        await message.answer("==== –ê–∫–∫–∞—É–Ω—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ====")
        await message.delete()
        return

    await get_menu(message)
    await message.delete()

@dp.message()
async def delete_everything_else(message: Message):
    await message.delete()
    message = await message.answer("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å <b>–º–µ–Ω—é</b>!\n\n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, <b>—É–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å —ç—Ç–∏–º –±–æ—Ç–æ–º –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ</b>", parse_mode="HTML")
    await asyncio.sleep(7)
    await message.delete()

async def get_menu(message: Message):
    markup = InlineKeyboardBuilder()
    markup.row(InlineKeyboardButton(text="–ò—â—É –º–∞—Å—Ç–µ—Ä–∞", callback_data="/looking"))
    markup.row(InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥–∏", callback_data="/offer"))
    markup.row(InlineKeyboardButton(text="–°–Ω–∏–º—É —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", callback_data="/rent"))
    markup.row(InlineKeyboardButton(text="–°–¥–∞–º —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", callback_data="/lease"))
    markup.row(InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="/feedback"))

    await message.answer("<b>‚ò∞ –ú–µ–Ω—é</b>", reply_markup=markup.as_markup(), parse_mode="HTML")

#########################
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    loop.close()
